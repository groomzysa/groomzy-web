/**
 *
 * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT!
 *
 * instead, edit one of the `.graphql` files in this project and run
 *
 * npm run graphql-codegen
 *
 * for this file to be re-created
 */

import type * as Types from '../../api.schema';

import { api } from '../../..';
export type AddUserMutationVariables = Types.Exact<{
  firstName: Types.Scalars['String'];
  lastName: Types.Scalars['String'];
  email: Types.Scalars['String'];
  password: Types.Scalars['String'];
  role: Types.UserRole;
  userImage?: Types.InputMaybe<Types.Scalars['Upload']>;
}>;


export type AddUserMutationResult = { __typename?: 'Mutation', addUser: { __typename?: 'User', id: number, firstName?: string | null, lastName?: string | null, email?: string | null, role?: Types.UserRole | null, state?: Types.UserStatus | null, userImageUrl?: string | null } };


export const AddUserDocument = `
    mutation addUser($firstName: String!, $lastName: String!, $email: String!, $password: String!, $role: UserRole!, $userImage: Upload) {
  addUser(
    firstName: $firstName
    lastName: $lastName
    email: $email
    password: $password
    role: $role
    userImage: $userImage
  ) {
    id
    firstName
    lastName
    email
    role
    state
    userImageUrl
  }
}
    `;

const injectedRtkApi = api.injectEndpoints({
  endpoints: (build) => ({
    addUser: build.mutation<AddUserMutationResult, AddUserMutationVariables>({
      query: (variables) => ({ document: AddUserDocument, variables })
    }),
  }),
});

export { injectedRtkApi as api };
export const { useAddUserMutation } = injectedRtkApi;

