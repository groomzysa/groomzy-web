/**
 *
 * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT!
 *
 * instead, edit one of the `.graphql` files in this project and run
 *
 * npm run graphql-codegen
 *
 * for this file to be re-created
 */

import type * as Types from '../../api.schema';

import { api } from '../../..';
export type ResetPasswordMutationVariables = Types.Exact<{
  passwordResetOTP: Types.Scalars['String'];
  password: Types.Scalars['String'];
}>;


export type ResetPasswordMutationResult = { __typename?: 'Mutation', resetPassword: { __typename?: 'Message', message: string } };


export const ResetPasswordDocument = `
    mutation resetPassword($passwordResetOTP: String!, $password: String!) {
  resetPassword(passwordResetOTP: $passwordResetOTP, password: $password) {
    message
  }
}
    `;

const injectedRtkApi = api.injectEndpoints({
  endpoints: (build) => ({
    resetPassword: build.mutation<ResetPasswordMutationResult, ResetPasswordMutationVariables>({
      query: (variables) => ({ document: ResetPasswordDocument, variables })
    }),
  }),
});

export { injectedRtkApi as api };
export const { useResetPasswordMutation } = injectedRtkApi;

