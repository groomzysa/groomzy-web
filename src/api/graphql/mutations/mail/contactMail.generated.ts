/**
 *
 * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT!
 *
 * instead, edit one of the `.graphql` files in this project and run
 *
 * npm run graphql-codegen
 *
 * for this file to be re-created
 */

import type * as Types from '../../api.schema';

import { api } from '../../..';
export type ContactMailMutationVariables = Types.Exact<{
  firstName: Types.Scalars['String'];
  lastName: Types.Scalars['String'];
  email: Types.Scalars['String'];
  subject: Types.Scalars['String'];
  message: Types.Scalars['String'];
}>;


export type ContactMailMutationResult = { __typename?: 'Mutation', contactMail: { __typename?: 'Message', message: string } };


export const ContactMailDocument = `
    mutation contactMail($firstName: String!, $lastName: String!, $email: String!, $subject: String!, $message: String!) {
  contactMail(
    firstName: $firstName
    lastName: $lastName
    email: $email
    subject: $subject
    message: $message
  ) {
    message
  }
}
    `;

const injectedRtkApi = api.injectEndpoints({
  endpoints: (build) => ({
    contactMail: build.mutation<ContactMailMutationResult, ContactMailMutationVariables>({
      query: (variables) => ({ document: ContactMailDocument, variables })
    }),
  }),
});

export { injectedRtkApi as api };
export const { useContactMailMutation } = injectedRtkApi;

