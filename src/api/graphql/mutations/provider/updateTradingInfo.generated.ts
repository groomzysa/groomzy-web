/**
 *
 * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT!
 *
 * instead, edit one of the `.graphql` files in this project and run
 *
 * npm run graphql-codegen
 *
 * for this file to be re-created
 */

import type * as Types from '../../api.schema';

import { api } from '../../..';
export type UpdateTradingInfoMutationVariables = Types.Exact<{
  providerId: Types.Scalars['Int'];
  tradingName?: Types.InputMaybe<Types.Scalars['String']>;
  phone?: Types.InputMaybe<Types.Scalars['String']>;
  logo?: Types.InputMaybe<Types.Scalars['Upload']>;
}>;


export type UpdateTradingInfoMutationResult = { __typename?: 'Mutation', updateTradingInfo: { __typename?: 'Provider', id: number, tradingName?: string | null, phone?: string | null, logoUrl?: string | null } };


export const UpdateTradingInfoDocument = `
    mutation updateTradingInfo($providerId: Int!, $tradingName: String, $phone: String, $logo: Upload) {
  updateTradingInfo(
    providerId: $providerId
    tradingName: $tradingName
    phone: $phone
    logo: $logo
  ) {
    id
    tradingName
    phone
    logoUrl
  }
}
    `;

const injectedRtkApi = api.injectEndpoints({
  endpoints: (build) => ({
    updateTradingInfo: build.mutation<UpdateTradingInfoMutationResult, UpdateTradingInfoMutationVariables>({
      query: (variables) => ({ document: UpdateTradingInfoDocument, variables })
    }),
  }),
});

export { injectedRtkApi as api };
export const { useUpdateTradingInfoMutation } = injectedRtkApi;

